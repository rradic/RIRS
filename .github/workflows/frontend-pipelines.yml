# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: frontend-pipelines

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "production" ]

jobs:
  build:

    runs-on: ubuntu-latest

    #    strategy:
    #      matrix:
    #        node-version: [20.13.1]
    #        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

  git stat  steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: 20.13.1

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: front/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('front/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install dependencies
        run: |
          cd front/
          npm ci

      - name: Build application
        run: |
          cd front/
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: front/build/

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.13.1

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: front/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('front/package-lock.json') }}
          restore-keys: |
              ${{ runner.os }}-frontend-

      - name: Install dependencies
        run: |
          ls
          cd front/
          ls
          npm install

      - name: Install dependencies
        run: |
          cd front/
          npm ci

      - name: Run tests with coverage
        run: |
          cd front/
          npm run test:ci

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: front/coverage/

  dockerize-and-push-dev:
    needs: test
    runs-on: ubuntu-latest
    environment: development
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:dev front/
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:dev ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:dev
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:${{ github.sha }} 

  sonarcloud-analysis:
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: Production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          cd front
          npm ci

      - name: Collect coverage (React-specific)
        run: |
          cd front
          npm run test:ci -- --coverage
        env:
          CI: true

      - name: Upload coverage report
        run: |
          cp front/coverage/lcov.info .

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.ORGANIZATION_KEY }} \
            -Dsonar.sources=./front \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  dockerize-and-push-prod:
    needs: [test, sonarcloud-analysis]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/production' &&  github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:prod front/
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:prod ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:prod
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:${{ github.sha }}

  deploy-to-firebase:
    needs: [test, sonarcloud-analysis]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/production' ||  github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: front/build/

      - name: Setup Firebase CLI
        run: |
          cd front/
          npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        run: |
          cd front/
          firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }}

  deploy-pages:
    needs: test
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: ./docs
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4